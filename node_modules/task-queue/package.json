{
  "_from": "task-queue@^1.0.2",
  "_id": "task-queue@1.0.2",
  "_inBundle": false,
  "_integrity": "sha1-RvPLXg6ccU+taLQZKkNEekdcZsI=",
  "_location": "/task-queue",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "task-queue",
    "fetchSpec": "^1.0.2",
    "name": "task-queue",
    "raw": "task-queue@^1.0.2",
    "rawSpec": "^1.0.2",
    "registry": true,
    "saveSpec": null,
    "type": "range"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/task-queue/-/task-queue-1.0.2.tgz",
  "_shasum": "46f3cb5e0e9c714fad68b4192a43447a475c66c2",
  "_spec": "task-queue@^1.0.2",
  "_where": "/home/lcheong/twitter",
  "author": {
    "email": "robertosalesc@dcc.ufba.br",
    "name": "Roberto Sales"
  },
  "bugs": {
    "url": "https://github.com/rsalesc/task-queue/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "binaryheap-resizable": "~1.0.0",
    "cbuffer-resizable": "~0.0.3"
  },
  "deprecated": false,
  "description": "async single worker tasks queue that supports concurrency, priority and provide simple interface for passing task arguments",
  "devDependencies": {
    "chai": "1.x.x",
    "coffee-script": "1.8.x",
    "mocha": "1.x.x"
  },
  "homepage": "https://github.com/rsalesc/task-queue#readme",
  "keywords": [
    "async",
    "concurrency",
    "priority",
    "queue",
    "task",
    "worker"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "task-queue",
  "optionalDependencies": {},
  "readme": "[![npm status](http://img.shields.io/npm/v/task-queue.svg)](https://www.npmjs.org/package/task-queue)\n[![dependency status](https://david-dm.org/skywalkerd/task-queue.svg)](https://david-dm.org/skywalkerd/task-queue)\n[![experimental](http://img.shields.io/badge/stability-experimental-DD5F0A.svg)](http://nodejs.org/api/documentation.html#documentation_stability_index)\n\n# Async [Priority] Task Queue\n\n### Simple Usage\n\n```javascript\nvar tq = require('task-queue');\n\nvar queue = tq.Queue({capacity: 10, concurrency: 1});\n// initialize a 10-slot normal queue. concurrency 1 is the default\n// it tells the worker in how many tasks it can work at a time\n\nqueue.start();\n// start queue - now it's waiting for the queue to be populated\n\nqueue.enqueue(some_function); // simple way to enqueue a function\nqueue.enqueue(some_function, {args: args_array}); // provide args to the function\n\n// both tasks above will be executed (one at a time, since concurrency is 1)\n\nqueue.stop();\n// stops the queue execution\n// it wont stop the tasks the worker is currently working on\n\nqueue.finished = some_callback_function;\n// you can define a finished() callback that will\n// be called everytime the worker empties the queue\n\nvar priority = tq.PriorityQueue({capacity: 10});\n// initialize a 10-slot priority queue\n\npriority.start();\n```\n\n### What is this?\n`task-queue` is a simple node package which provides an **async task queue** that supports **concurrency**, **priority** and **timeouts**. It provides **callbacks** for tasks completed as well as a way to handle **single shot calls** (run all the tasks once).\n\n### Features\n- Async\n- Concurrency\n- Timeouts\n- Callbacks\n- Single-shot calls\n- Priority\n\n### Implementation-level details\nThe `Queue` is implemented over a *resizable buffer* so you do not need to worry about a max-space as well as massive reallocations. Just tell it the initial `capacity` you need and it will do the hard work for you.\n\nThe `PriorityQueue` is implemented over a *resizable binary heap* so you do not need to worry about max-space, massive reallocations as well as algorithm complexity.\n\n### API\n##### Queue\n* `Queue(options)` - initialize a queue with the given option\n    * `options`:\n        * `capacity` - `Queue` initial capacity. **(required)**\n        * `concurrency` - how many tasks the worker will execute at a time. default 1.\n        * `timeout` - how much time the worker will sleep after each execution cycle.\n* `isRunning()` - returns boolean indicating if `running` mode is set.\n* `concurrency([value])` - get/set concurrency\n* `timeout([value])` - get/set timeout\n* `size()` - returns how many elements are currently on the queue\n* `toArray()` - returns an array representation of the queue.\n\n###### Flow\n* `enqueue(fn [, task-opts])` - add task from function `fn` to the queue.\n    * `task-opts`:\n        * `args` - arguments array that will be applied to `fn` call.\n* `dequeue()` - pull the first element from the queue, or null if it's empty.\n* `singleShot()` - puts the queue in `single-shot` mode. all the queue elements will be executed once from now. Nothing can be enqueued while `single-shot` is active. When all the tasks are finished, the queue is put back in `normal` mode. you can `stop()` single-shot calls as well.\n* `start()` - puts the queue in `running` mode. The worker will execute tasks whenever they are available if it's not sleeping.\n* `stop()` - unset `running` mode and/or unset `single-shot` mode. The worker will finish all the tasks that were already dequeued and then go idle.\n\n###### Callbacks\n* `finished()` - called when all the tasks from the queue were executed (queue was emptied).\n* `finishedTask([task-return])` - called whenever a task is executed. `task-return` is the return value of the task corresponding function.\n\n##### PriorityQueue **extends Queue**\n* `PriorityQueue` - `super` constructor.\n\n###### Flow\n* `enqueue(fn [, task-opts])` - add task from function `fn` to the queue.\n    * `task-opts`:\n        * `args` - arguments array that will be applied to `fn` call.\n        * `priority` - comparable (with > or <) value that will be used to sort tasks executions by their relevance.",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/rsalesc/task-queue.git"
  },
  "scripts": {
    "clean": "rm -rf lib/*",
    "prepublish": "npm run clean && coffee -o lib/ -c src/",
    "pretest": "npm run clean && coffee -m -o lib/ -c src/",
    "test": "mocha --compilers coffee:coffee-script/register --reporter spec"
  },
  "version": "1.0.2"
}
